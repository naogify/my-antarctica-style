#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const fs_1 = __importDefault(require("fs"));
const init_1 = require("./commands/init");
const convert_1 = require("./commands/convert");
const build_1 = require("./commands/build");
const serve_1 = require("./commands/serve");
const defaultValues_1 = require("./lib/defaultValues");
const program = new commander_1.Command();
const error = (message) => {
    console.error(message.toString());
    process.exit(1);
};
program
    .option('--provider [provider]', 'your map service. e.g. `mapbox`, `geolonia`')
    .option('--mapbox-access-token [mapboxAccessToken]', 'Access Token for the Mapbox');
program
    .command('init <file>')
    .description('initialize a style JSON')
    .action((file) => {
    try {
        init_1.init(file);
    }
    catch (e) {
        error(e);
    }
});
program
    .command('convert <source> [destination]')
    .description('convert the style JSON to YAML')
    .action((source, destination) => {
    try {
        convert_1.convert(source, destination);
    }
    catch (e) {
        error(e);
    }
});
program
    .command('build <source> [destination]')
    .description('build a style JSON from the YAML')
    .option('-c, --compact-output', 'build a minified style JSON')
    .action((source, destination, buildOptions) => {
    const options = program.opts();
    options.compactOutput = buildOptions.compactOutput;
    if (!fs_1.default.existsSync(defaultValues_1.defaultSettings.configFile)) {
        fs_1.default.writeFileSync(defaultValues_1.defaultSettings.configFile, `provider: ${options.provider || 'default'}`);
    }
    try {
        build_1.build(source, destination, options);
    }
    catch (e) {
        error(e);
    }
});
program
    .command('serve <source>')
    .description('serve your map locally')
    .action((source) => {
    const options = program.opts();
    if (!fs_1.default.existsSync(defaultValues_1.defaultSettings.configFile)) {
        fs_1.default.writeFileSync(defaultValues_1.defaultSettings.configFile, `provider: ${options.provider || 'default'}`);
    }
    try {
        serve_1.serve(source, program.opts());
    }
    catch (e) {
        error(e);
    }
});
program.parse(process.argv);
