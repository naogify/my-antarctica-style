"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parser = void 0;
const fs_1 = __importDefault(require("fs"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const yamlinc = require('yaml-include');
function parser(file) {
    yamlinc.setBaseFile(file);
    const yaml = fs_1.default.readFileSync(file, 'utf8');
    const obj = js_yaml_1.default.load(yaml, {
        schema: yamlinc.YAML_INCLUDE_SCHEMA,
        filename: file,
        json: true
    });
    const styleObj = {};
    let variables = {};
    for (const key in obj) {
        if (key.match(/^\$/)) {
            variables[key] = obj[key];
        }
        else {
            styleObj[key] = obj[key];
        }
    }
    // Handle all nested variables.
    while (JSON.stringify(Object.values(variables)).match(/\$/)) {
        for (const key in variables) {
            for (const variable in variables) {
                let _value = JSON.stringify(variables[key]);
                const regex = new RegExp(`\"\\${variable}\"`, 'g');
                _value = _value.replace(regex, JSON.stringify(variables[variable]));
                variables[key] = JSON.parse(_value);
            }
        }
    }
    let style = JSON.stringify(styleObj);
    for (const key in variables) {
        const regex = new RegExp(`\"\\${key}\"`, 'g');
        style = style.replace(regex, JSON.stringify(variables[key]));
    }
    return JSON.parse(style);
}
exports.parser = parser;
