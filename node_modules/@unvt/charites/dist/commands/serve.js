"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serve = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const http_1 = __importDefault(require("http"));
const open_1 = __importDefault(require("open"));
const ws_1 = require("ws");
const node_watch_1 = __importDefault(require("node-watch"));
const yaml_parser_1 = require("../lib/yaml-parser");
const validate_style_1 = require("../lib/validate-style");
const defaultValues_1 = require("../lib/defaultValues");
function serve(source, options) {
    const port = process.env.PORT || 8080;
    let sourcePath = path_1.default.resolve(process.cwd(), source);
    let provider = defaultValues_1.defaultValues.provider;
    if (options.provider) {
        provider = options.provider;
    }
    // The `source` is absolute path.
    if (source.match(/^\//)) {
        sourcePath = source;
    }
    if (!fs_1.default.existsSync(sourcePath)) {
        throw `${sourcePath}: No such file or directory`;
    }
    const server = http_1.default.createServer((req, res) => {
        const url = (req.url || '').replace(/\?.*/, '');
        const dir = path_1.default.join(defaultValues_1.defaultValues.providerDir, provider);
        switch (url) {
            case '/':
                res.statusCode = 200;
                res.setHeader('Content-Type', 'text/html; charset=UTF-8');
                const content = fs_1.default.readFileSync(path_1.default.join(dir, 'index.html'), 'utf-8');
                res.end(content);
                break;
            case '/style.json':
                let style;
                try {
                    style = yaml_parser_1.parser(sourcePath);
                    validate_style_1.validateStyle(style, provider);
                }
                catch (error) {
                    console.log(error);
                }
                res.statusCode = 200;
                res.setHeader('Content-Type', 'application/json; charset=UTF-8');
                res.end(JSON.stringify(style));
                break;
            case '/app.css':
                res.statusCode = 200;
                res.setHeader('Content-Type', 'text/css; charset=UTF-8');
                const css = fs_1.default.readFileSync(path_1.default.join(dir, 'app.css'), 'utf-8');
                res.end(css);
                break;
            case `/app.js`:
                res.statusCode = 200;
                res.setHeader('Content-Type', 'application/javascript; charset=UTF-8');
                try {
                    const app = fs_1.default.readFileSync(path_1.default.join(dir, 'app.js'), 'utf-8');
                    const js = app.replace('___PORT___', `${port}`)
                        .replace('___MAPBOX_ACCESS_TOKEN___', `${options.mapboxAccessToken || defaultValues_1.defaultValues.mapboxAccessToken}`);
                    res.end(js);
                }
                catch (e) {
                    throw `Invalid provider: ${provider}`;
                }
                break;
        }
    });
    server.listen(port, () => {
        console.log(`Provider: ${provider}`);
        console.log(`Loading your style: ${sourcePath}`);
        console.log(`Your map is running on http://localhost:${port}/\n`);
        open_1.default(`http://localhost:${port}`);
    });
    const wss = new ws_1.WebSocketServer({ server });
    wss.on('connection', (ws) => {
        node_watch_1.default(path_1.default.dirname(sourcePath), { recursive: true, filter: /\.yml$/ }, (event, file) => {
            console.log(`${(event || '').toUpperCase()}: ${file}`);
            try {
                const style = yaml_parser_1.parser(sourcePath);
                try {
                    validate_style_1.validateStyle(style, provider);
                }
                catch (error) {
                    console.log(error);
                }
                ws.send(JSON.stringify(style));
            }
            catch (e) {
                // Nothing to do
            }
        });
    });
    return server;
}
exports.serve = serve;
